# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sunfounder
# This file is distributed under the same license as the SunFounder Da Vinci Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Da Vinci Kit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-06 17:58+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../2.2.3_dht-11.rst:2
msgid "2.2.3 DHT-11"
msgstr ""

#: ../2.2.3_dht-11.rst:5
msgid "Introduction"
msgstr ""

#: ../2.2.3_dht-11.rst:7
msgid "The digital temperature and humidity sensor DHT11 is a composite sensor that contains a calibrated digital signal output of temperature and humidity. The technology of a dedicated digital modules collection and the technology of the temperature and humidity sensing are applied to ensure that the product has high reliability and excellent stability."
msgstr ""

#: ../2.2.3_dht-11.rst:13
msgid "The sensors include a wet element resistive sensor and a NTC temperature sensor and they are connected to a high performance 8-bit microcontroller."
msgstr ""

#: ../2.2.3_dht-11.rst:18
msgid "Components"
msgstr ""

#: ../2.2.3_dht-11.rst:24
msgid "Principle"
msgstr ""

#: ../2.2.3_dht-11.rst:26
msgid "The DHT11 is a basic, ultra low-cost digital temperature and humidity sensor. It uses a capacitive humidity sensor and a thermistor to measure the surrounding air, and spits out a digital signal on the data pin (no analog input pins are needed)."
msgstr ""

#: ../2.2.3_dht-11.rst:34
msgid "Only three pins are available: VCC, GND, and DATA. The communication process begins with the DATA line sending start signals to DHT11, and DHT11 receives the signals and returns an answer signal. Then the host receives the answer signal and begins to receive 40-bit humiture data (8-bit humidity integer + 8-bit humidity decimal + 8-bit temperature integer + 8-bit temperature decimal + 8-bit checksum). For more information, please refer to DHT11 datasheet."
msgstr ""

#: ../2.2.3_dht-11.rst:43
msgid "Schematic Diagram"
msgstr ""

#: ../2.2.3_dht-11.rst:49
msgid "Experimental Procedures"
msgstr ""

#: ../2.2.3_dht-11.rst:51
msgid "**Step 1:** Build the circuit."
msgstr ""

#: ../2.2.3_dht-11.rst:57
msgid "For C Language Users"
msgstr ""

#: ../2.2.3_dht-11.rst:59
#: ../2.2.3_dht-11.rst:278
msgid "**Step 2:** Go to the folder of the code."
msgstr ""

#: ../2.2.3_dht-11.rst:69
msgid "**Step 3:** Compile the code."
msgstr ""

#: ../2.2.3_dht-11.rst:79
msgid "**Step 4:** Run the executable file."
msgstr ""

#: ../2.2.3_dht-11.rst:89
#: ../2.2.3_dht-11.rst:298
msgid "After the code runs, the program will print the temperature and humidity detected by DHT11 on the computer screen."
msgstr ""

#: ../2.2.3_dht-11.rst:92
#: ../2.2.3_dht-11.rst:301
msgid "**Code**"
msgstr ""

#: ../2.2.3_dht-11.rst:166
#: ../2.2.3_dht-11.rst:437
msgid "**Code Explanation**"
msgstr ""

#: ../2.2.3_dht-11.rst:179
msgid "This function is used to realize the function of DHT11."
msgstr ""

#: ../2.2.3_dht-11.rst:181
msgid "It generally can be divided into 3 parts:"
msgstr ""

#: ../2.2.3_dht-11.rst:183
msgid "prepare to read the pin:"
msgstr ""

#: ../2.2.3_dht-11.rst:197
msgid "Its communication flow is determined by work timing."
msgstr ""

#: ../2.2.3_dht-11.rst:202
msgid "When DHT11 starts up, MCU will send a low level signal and then keep the signal at high level for 40us. After that, the detection of the condition of external environment will start."
msgstr ""

#: ../2.2.3_dht-11.rst:206
msgid "read data:"
msgstr ""

#: ../2.2.3_dht-11.rst:232
msgid "The loop stores the detected data in the dht11_dat[] array. DHT11 transmits data of 40 bits at a time. The first 16 bits are related to humidity, the middle 16 bits are related to temperature, and the last eight bits are used for verification. The data format is:"
msgstr ""

#: ../2.2.3_dht-11.rst:237
msgid "**8bit humidity integer data** + **8bit humidity decimal data** + **8bit temperature integer data** + **8bit temperature decimal data** + **8bit check bit**."
msgstr ""

#: ../2.2.3_dht-11.rst:241
msgid "Print Humidity & Temperature."
msgstr ""

#: ../2.2.3_dht-11.rst:254
msgid "When the data storage is up to 40 bits, check the validity of the data through the **check bit (dht11_dat[4])**, and then print the temperature and humidity."
msgstr ""

#: ../2.2.3_dht-11.rst:258
msgid "For example, if the received data is 00101011(8-bit value of humidity integer) 00000000 (8-bit value of humidity decimal) 00111100 (8-bit value of temperature integer) 00000000 (8-bit value of temperature decimal) 01100111 (check bit)"
msgstr ""

#: ../2.2.3_dht-11.rst:263
#: ../2.2.3_dht-11.rst:480
msgid "**Calculation:**"
msgstr ""

#: ../2.2.3_dht-11.rst:265
#: ../2.2.3_dht-11.rst:482
msgid "00101011+00000000+00111100+00000000=01100111."
msgstr ""

#: ../2.2.3_dht-11.rst:267
msgid "The final result is equal to the check bit data, then the received data is correct:"
msgstr ""

#: ../2.2.3_dht-11.rst:270
msgid "Humidity =43%，Temperature =60*C."
msgstr ""

#: ../2.2.3_dht-11.rst:272
msgid "If it is not equal to the check bit data, the data transmission is not normal and the data is received again."
msgstr ""

#: ../2.2.3_dht-11.rst:276
msgid "For Python Language Users"
msgstr ""

#: ../2.2.3_dht-11.rst:288
msgid "**Step 3:** Run the executable file."
msgstr ""

#: ../2.2.3_dht-11.rst:305
msgid "You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, you need to go to  source code path like ``davinci-kit-for-raspberry-pi\\\\python``."
msgstr ""

#: ../2.2.3_dht-11.rst:453
msgid "This function is used to implement the functions of DHT11. It stores the detected data in the the_bytes[] array. DHT11 transmits data of 40 bits at a time. The first 16 bits are related to humidity, the middle 16 bits are related to temperature, and the last eight bits are used for verification. The data format is:"
msgstr ""

#: ../2.2.3_dht-11.rst:459
msgid "**8bit humidity integer data** +\\ **8bit humidity decimal data** +\\ **8bit temperature integer data** + **8bit temperature decimal data** + **8bit check bit**."
msgstr ""

#: ../2.2.3_dht-11.rst:463
msgid "When the validity is detected via the check bit, the function returns two results: 1. error; 2. humidity and temperature."
msgstr ""

#: ../2.2.3_dht-11.rst:475
msgid "For example, if the received date is 00101011(8-bit value of humidity integer) 00000000 (8-bit value of humidity decimal) 00111100 (8-bit value of temperature integer) 00000000 (8-bit value of temperature decimal) 01100111 (check bit)"
msgstr ""

#: ../2.2.3_dht-11.rst:484
msgid "If the final result is equal to the check bit data, the data transmission is abnormal: return False."
msgstr ""

#: ../2.2.3_dht-11.rst:487
msgid "If the final result is equal to the check bit data, the received data is correct, then there will return the_bytes[0] and the_bytes[2] and output “Humidity =43%，Temperature =60C”."
msgstr ""

#: ../2.2.3_dht-11.rst:492
msgid "Phenomenon Picture"
msgstr ""
