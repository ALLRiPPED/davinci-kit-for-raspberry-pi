# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sunfounder
# This file is distributed under the same license as the SunFounder Da Vinci Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Da Vinci Kit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-06 17:51+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../1.1.5_4-Digit_7-segment_display.rst:2
msgid "1.1.5 4-Digit 7-Segment Display"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:5
msgid "Introduction"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:7
msgid "Next, follow me to try to control the 4-digit 7-segment display."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:10
msgid "Components"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:16
msgid "Principle"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:18
msgid "**4-Digit 7-Segment Display**"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:20
msgid "4-Digit 7-segment display consists of four 7- segment displays working together."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:25
msgid "The 4-digtal 7-segment display works independently. It uses the principle of human visual persistence to quickly display the characters of each 7-segment in a loop to form continuous strings."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:29
msgid "For example, when \"1234\" is displayed on the display, \"1\" is displayed on the first 7-segment, and \"234\" is not displayed. After a period of time, the second 7-segment shows \"2\", the 1st 3th 4th of 7-segment does not show, and so on, the four digital display show in turn. This process is very short (typically 5ms), and because of the optical afterglow effect and the principle of visual residue, we can see four characters at the same time."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:40
msgid "**Display Codes**"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:42
msgid "To help you get to know how 7-segment displays(Common Anode) display Numbers, we have drawn the following table. Numbers are the number 0-F displayed on the 7-segment display; (DP) GFEDCBA refers to the corresponding LED set to 0 or 1, For example, 11000000 means that DP and G are set to 1, while others are set to 0. Therefore, the number 0 is displayed on the 7-segment display, while HEX Code corresponds to hexadecimal number."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:54
msgid "Schematic Diagram"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:57
msgid "T-Board Name"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:57
msgid "physical"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:57
msgid "wiringPi"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:57
msgid "BCM"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:58
msgid "GPIO17"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:58
msgid "Pin 11"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:58
msgid "0"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:58
msgid "17"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:59
msgid "GPIO27"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:59
msgid "Pin 13"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:59
msgid "2"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:59
msgid "27"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:60
msgid "GPIO22"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:60
msgid "Pin 15"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:60
msgid "3"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:60
msgid "22"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:61
msgid "SPIMOSI"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:61
msgid "Pin 19"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:61
msgid "12"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:61
msgid "10"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:62
msgid "GPIO18"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:62
msgid "Pin 12"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:62
msgid "1"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:62
msgid "18"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:63
msgid "GPIO23"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:63
msgid "Pin 16"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:63
msgid "4"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:63
msgid "23"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:64
msgid "GPIO24"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:64
msgid "Pin 18"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:64
msgid "5"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:64
msgid "24"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:71
msgid "Experimental Procedures"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:73
msgid "**Step 1**: Build the circuit."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:78
msgid "For C Language Users"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:79
#: ../1.1.5_4-Digit_7-segment_display.rst:322
msgid "Step 2: Go to the folder of the code."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:89
msgid "Step 3: Compile the code."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:99
msgid "Step 4: Run the executable file."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:109
msgid "After the code runs, the program takes a count, increasing by 1 per second, and the 4-digit 7-segment display displays the count."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:111
#: ../1.1.5_4-Digit_7-segment_display.rst:344
msgid "**Code**"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:223
#: ../1.1.5_4-Digit_7-segment_display.rst:444
msgid "**Code Explanation**"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:229
#: ../1.1.5_4-Digit_7-segment_display.rst:450
msgid "These four pins control the common anode pins of the four-digit 7-segment displays."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:235
msgid "A segment code array from 0 to 9 in Hexadecimal (Common anode)."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:248
#: ../1.1.5_4-Digit_7-segment_display.rst:477
msgid "Select the place of the value. there is only one place that should be enable each time. The enabled place will be written high."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:273
msgid "The functionis used to set the number displayed on the 4-digit 7-segment display."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:275
msgid "``clearDisplay()``：write in 11111111 to turn off these eight LEDs on 7-segment display so as to clear the displayed content."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:276
msgid "``pickDigit(0)``：pick the fourth 7-segment display."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:277
msgid "``hc595_shift(number[counter%10])``：the number in the single digit of counter will display on the forth segment."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:283
msgid "This is a system-provided function, the prototype of code is:"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:289
msgid "After executing the signal(), once the process receives the corresponding signum (in this case SIGALRM), it immediately pauses the existing task and processes the set function (in this case timer(sig))."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:295
msgid "This is also a system-provided function. The code prototype is:"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:301
msgid "It generates a SIGALRM signal after a certain number of seconds."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:315
msgid "We use the functions above to implement the timer function. After the ``alarm()`` generates the SIGALRM signal, the timer function is called. Add 1 to counter, and the function, ``alarm(1)`` will be repeatedly called after 1 second."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:320
msgid "For Python Language Users"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:332
msgid "Step 3: Run the executable file."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:342
msgid "After the code runs, the program takes a count, increasing by 1 per second, and the 4 digit display displays the count."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:348
msgid "You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, you need to go to  source code path like ``davinci-kit-for-raspberry-pi\\\\python``."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:456
msgid "A segment code array from 0 to 9 in hexadecimal (common anode)."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:468
msgid "Write \"1\" for eight times in SDI., so that the eight LEDs on the 7-segment Dispaly will turn off so as to clear the displayed content."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:500
msgid "The function is used to set the number displayed on the 4-digit 7-segment Dispaly."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:502
msgid "First, start the fourth segment display, write the single-digit number. Then start the third segment display, and type in the tens digit; after that, start the second and the first segment display respectively, and write the hundreds and thousands digits respectively. Because the refreshing speed is very fast, we see a complete four-digit display."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:509
msgid "The module, threading is the common threading module in Python，and Timer is the subclass of it. The prototype of code is:"
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:516
msgid "After the interval, the function will be run. Here, the interval is 1.0，and the function is timer(). start () means the Timer will start at this point."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:529
msgid "After Timer reaches 1.0s, the Timer function is called; add 1 to counter, and the Timer is used again to execute itself repeatedly every second."
msgstr ""

#: ../1.1.5_4-Digit_7-segment_display.rst:533
msgid "Phenomenon Picture"
msgstr ""
