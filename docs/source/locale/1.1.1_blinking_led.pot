# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sunfounder
# This file is distributed under the same license as the SunFounder Da Vinci Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Da Vinci Kit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-06 17:58+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../1.1.1_blinking_led.rst:2
msgid "1.1.1 Blinking LED"
msgstr ""

#: ../1.1.1_blinking_led.rst:5
msgid "Introduction"
msgstr ""

#: ../1.1.1_blinking_led.rst:7
msgid "In this lesson, we will learn how to make a blinking LED by programming. Through your settings, your LED can produce a series of interesting phenomena. Now, go for it."
msgstr ""

#: ../1.1.1_blinking_led.rst:12
msgid "Components"
msgstr ""

#: ../1.1.1_blinking_led.rst:20
msgid "In order to proceed smoothly, you need to bring your own Raspberry Pi, TF card and Raspberry Pi power."
msgstr ""

#: ../1.1.1_blinking_led.rst:25
msgid "Principle"
msgstr ""

#: ../1.1.1_blinking_led.rst:27
msgid "**Breadboard**"
msgstr ""

#: ../1.1.1_blinking_led.rst:29
msgid "A breadboard is a construction base for prototyping of electronics. It is used to build and test circuits quickly before finishing any circuit design. And it has many holes into which components mentioned above can be inserted like ICs and resistors as well as jumper wires. The breadboard allows you to plug in and remove components easily."
msgstr ""

#: ../1.1.1_blinking_led.rst:35
msgid "The picture shows the internal structure of a full+ breadboard. Although these holes on the breadboard appear to be independent of each other, they are actually connected to each other through metal strips internally."
msgstr ""

#: ../1.1.1_blinking_led.rst:42
msgid "**LED**"
msgstr ""

#: ../1.1.1_blinking_led.rst:44
msgid "LED is a kind of diode. LED will shine only if the long pin of LED is connected to the positive electrode and the short pin is connected to negative electrode."
msgstr ""

#: ../1.1.1_blinking_led.rst:48
#: ../1.1.1_blinking_led.rst:48
msgid "image42"
msgstr ""

#: ../1.1.1_blinking_led.rst:50
#: ../1.1.1_blinking_led.rst:50
msgid "image43"
msgstr ""

#: ../1.1.1_blinking_led.rst:52
msgid "|image42|\\ |image43|"
msgstr ""

#: ../1.1.1_blinking_led.rst:54
msgid "The LED can not be directly connected to power supply, which can damage component. A resistor with 160Ω or larger (work in 5V) must be connected in series in the circuit of LED."
msgstr ""

#: ../1.1.1_blinking_led.rst:60
msgid "**Resistor**"
msgstr ""

#: ../1.1.1_blinking_led.rst:62
msgid "Resistor is an electronic element that can limit the branch current. A fixed resistor is a kind of resistor whose resistance cannot be changed, while that of a potentiometer or a variable resistor can be adjusted."
msgstr ""

#: ../1.1.1_blinking_led.rst:66
msgid "Fixed resistor is applied in this kit. In the circuit, it is essential to protect the connected components. The following pictures show a real object, 220Ω resistor and two generally used circuit symbols of resistor. Ω is the unit of resistance and the larger units include KΩ, MΩ, etc. Their relationship can be shown as follows: 1 MΩ=1000 KΩ, 1 KΩ = 1000 Ω. Normally, the value of resistance is marked on it. So if you see these symbols in a circuit, it means that there is a resistor."
msgstr ""

#: ../1.1.1_blinking_led.rst:76
#: ../1.1.1_blinking_led.rst:76
msgid "image45"
msgstr ""

#: ../1.1.1_blinking_led.rst:78
#: ../1.1.1_blinking_led.rst:78
msgid "image46"
msgstr ""

#: ../1.1.1_blinking_led.rst:80
msgid "|image45|\\ |image46|"
msgstr ""

#: ../1.1.1_blinking_led.rst:82
msgid "When using a resistor, we need to know its resistance first. Here are two methods: you can observe the bands on the resistor, or use a multimeter to measure the resistance. You are recommended to use the first method as it is more convenient and faster. To measure the value, use multimeter."
msgstr ""

#: ../1.1.1_blinking_led.rst:88
msgid "As shown in the card, each color stands for a number."
msgstr ""

#: ../1.1.1_blinking_led.rst:93
msgid "Schematic Diagram"
msgstr ""

#: ../1.1.1_blinking_led.rst:95
msgid "In this experiment, connect a 220Ω resistor to the anode (the long pin of the LED), then the resistor to 3.3 V, and connect the cathode (the short pin) of the LED to GPIO17 of Raspberry Pi. Therefore, to turn on an LED, we need to make GPIO17 low (0V) level. We can get this phenomenon by programming."
msgstr ""

#: ../1.1.1_blinking_led.rst:103
msgid "**Pin11** refers to the 11th pin of the Raspberry Pi from left to right, and its corresponding **wiringPi** and **BCM** pin numbers are shown in the following table."
msgstr ""

#: ../1.1.1_blinking_led.rst:105
msgid "In the C language related content, we make GPIO0 equivalent to 0 in the wiringPi. Among the Python language related content, BCM 17 is 17 in the BCM column of the following table. At the same time, they are the same as the 11th pin on the Raspberry Pi, Pin 11."
msgstr ""

#: ../1.1.1_blinking_led.rst:111
msgid "T-Board Name"
msgstr ""

#: ../1.1.1_blinking_led.rst:111
msgid "physical"
msgstr ""

#: ../1.1.1_blinking_led.rst:111
msgid "wiringPi"
msgstr ""

#: ../1.1.1_blinking_led.rst:111
msgid "BCM"
msgstr ""

#: ../1.1.1_blinking_led.rst:112
msgid "GPIO17"
msgstr ""

#: ../1.1.1_blinking_led.rst:112
msgid "Pin 11"
msgstr ""

#: ../1.1.1_blinking_led.rst:112
msgid "0"
msgstr ""

#: ../1.1.1_blinking_led.rst:112
msgid "17"
msgstr ""

#: ../1.1.1_blinking_led.rst:120
msgid "Experimental Procedures"
msgstr ""

#: ../1.1.1_blinking_led.rst:122
msgid "**Step 1:** Build the circuit."
msgstr ""

#: ../1.1.1_blinking_led.rst:130
msgid "For C Language Users"
msgstr ""

#: ../1.1.1_blinking_led.rst:132
msgid "**Step 2:** Go to the folder of the code."
msgstr ""

#: ../1.1.1_blinking_led.rst:134
#: ../1.1.1_blinking_led.rst:361
msgid "If you use a screen, you're recommended to take the following steps."
msgstr ""

#: ../1.1.1_blinking_led.rst:136
msgid "Go to **/home/pi/** and find the folder **davinci-kit-for-raspberry-pi**."
msgstr ""

#: ../1.1.1_blinking_led.rst:139
msgid "Find **C** in the folder, right-click on it and select **Open in Terminal**."
msgstr ""

#: ../1.1.1_blinking_led.rst:146
msgid "Then a window will pop up as shown below. So now you've entered the path of the code **1.1.1_BlinkingLed.c** ."
msgstr ""

#: ../1.1.1_blinking_led.rst:153
msgid "In the following lessons, we will use command to enter the code file instead of right-clicking. But you can choose the method you prefer."
msgstr ""

#: ../1.1.1_blinking_led.rst:157
msgid "If you log into the Raspberry Pi remotely, use ``cd`` to change directory:"
msgstr ""

#: ../1.1.1_blinking_led.rst:168
msgid "Change directory to the path of the code in this experiment via cd."
msgstr ""

#: ../1.1.1_blinking_led.rst:170
msgid "In either way, now you are in the folder C. The subsequent procedures based on these two methods are the same. Let's move on."
msgstr ""

#: ../1.1.1_blinking_led.rst:173
msgid "**Step 3:** Compile the code"
msgstr ""

#: ../1.1.1_blinking_led.rst:184
msgid "gcc is GNU Compiler Collection. Here, it functions like compiling the C language file *1_BlinkingLed.c* and outputting an executable file."
msgstr ""

#: ../1.1.1_blinking_led.rst:188
msgid "In the command, ``-o`` means outputting (the character immediately following -o is the filename output after compilation, and an executable named ``BlinkingLed`` will generate here) and ``-lwiringPi`` is to load the library wiringPi (``l`` is the abbreviation of library)."
msgstr ""

#: ../1.1.1_blinking_led.rst:193
msgid "**Step 4:** Run the executable file output in the previous step."
msgstr ""

#: ../1.1.1_blinking_led.rst:203
msgid "To control the GPIO, you need to run the program, by the command, sudo(superuser do). The command ``./`` indicates the current directory. The whole command is to run the ``BlinkingLed`` in the current directory."
msgstr ""

#: ../1.1.1_blinking_led.rst:212
#: ../1.1.1_blinking_led.rst:400
msgid "After the code runs, you will see the LED flashing."
msgstr ""

#: ../1.1.1_blinking_led.rst:214
msgid "If you want to edit the code file ``1.1.1_BlinkingLed.c``, press ``Ctrl + C`` to stop running the code. Then type the following command to open it:"
msgstr ""

#: ../1.1.1_blinking_led.rst:227
msgid "nano is a text editor tool. The command is used to open the code file ``1.1.1_BlinkingLed.c`` by this tool."
msgstr ""

#: ../1.1.1_blinking_led.rst:230
msgid "Press ``Ctrl+X`` to exit. If you have modified the code, there will be a prompt asking whether to save the changes or not. Type in ``Y`` (save) or ``N`` (don’t save). Then press ``Enter`` to exit. Repeat ``Step 3`` and ``Step 4`` to see the effect after modifying."
msgstr ""

#: ../1.1.1_blinking_led.rst:239
#: ../1.1.1_blinking_led.rst:425
msgid "**Code**"
msgstr ""

#: ../1.1.1_blinking_led.rst:241
msgid "The program code is shown as follows:"
msgstr ""

#: ../1.1.1_blinking_led.rst:269
#: ../1.1.1_blinking_led.rst:472
msgid "**Code Explanation**"
msgstr ""

#: ../1.1.1_blinking_led.rst:275
msgid "The hardware drive library is designed for the C language of Raspberry Pi. Adding this library is conducive to the initialization of hardware, and the output of I/O ports, PWM, etc."
msgstr ""

#: ../1.1.1_blinking_led.rst:283
msgid "Standard I/O library. The pintf function used for printing the data displayed on the screen is realized by this library. There are many other performance functions for you to explore."
msgstr ""

#: ../1.1.1_blinking_led.rst:291
msgid "Pin GPIO17 of the T_Extension Board is corresponding to the GPIO0 in wiringPi. Assign GPIO0 to LedPin, LedPin represents GPIO0 in the code later."
msgstr ""

#: ../1.1.1_blinking_led.rst:301
msgid "This initialises wiringPi and assumes that the calling program is going to be using the wiringPi pin numbering scheme."
msgstr ""

#: ../1.1.1_blinking_led.rst:304
msgid "This function needs to be called with root privileges. When initialize wiring failed, print message to screen. The function “return” is used to jump out of the current function. Using return in main() function will end the program."
msgstr ""

#: ../1.1.1_blinking_led.rst:313
msgid "Set LedPin as output to write value to it."
msgstr ""

#: ../1.1.1_blinking_led.rst:319
msgid "Set GPIO0 as 0V (low level). Since the cathode of LED is connected to GPIO0, thus the LED will light up if GPIO0 is set low. On the contrary, set GPIO0 as high level, digitalWrite (LedPin, HIGH): LED will go out."
msgstr ""

#: ../1.1.1_blinking_led.rst:327
msgid "The printf function is a standard library function and its function prototype is in the header file \"stdio.h\". The general form of the call is: printf(\" format control string \", output table columns). The format control string is used to specify the output format, which is divided into format string and non-format string. The format string starts with '%' followed by format characters, such as' %d 'for decimal integer output. Unformatted strings are printed as prototypes. What is used here is a non-format string, followed by \"\\n\" that is a newline character, representing automatic line wrapping after printing a string."
msgstr ""

#: ../1.1.1_blinking_led.rst:341
msgid "Delay (500) keeps the current HIGH or LOW state for 500ms."
msgstr ""

#: ../1.1.1_blinking_led.rst:343
msgid "This is a function that suspends the program for a period of time. And the speed of the program is determined by our hardware. Here we turn on or off the LED. If there is no delay function, the program will run the whole program very fast and continuously loop. So we need the delay function to help us write and debug the program."
msgstr ""

#: ../1.1.1_blinking_led.rst:353
msgid "Usually, it is placed behind the main function, indicating that the function returns 0 on successful execution."
msgstr ""

#: ../1.1.1_blinking_led.rst:357
msgid "For Python Language Users"
msgstr ""

#: ../1.1.1_blinking_led.rst:359
msgid "**Step 2:** Go to the folder of the code and run it."
msgstr ""

#: ../1.1.1_blinking_led.rst:363
msgid "Find 1.1.1_BlinkingLed.py and double click it to open. Now you're in the file."
msgstr ""

#: ../1.1.1_blinking_led.rst:366
msgid "Click **Run** ->\\ **Run Module** in the window and the following contents will appear."
msgstr ""

#: ../1.1.1_blinking_led.rst:369
msgid "To stop it from running, just click the X button on the top right to close it and then you'll back to the code. If you modify the code, before clicking **Run Module (F5)** you need to save it first. Then you can see the results."
msgstr ""

#: ../1.1.1_blinking_led.rst:374
msgid "If you log into the Raspberry Pi remotely, type in the command:"
msgstr ""

#: ../1.1.1_blinking_led.rst:385
msgid "Change directory to the path of the code in this experiment via ``cd``."
msgstr ""

#: ../1.1.1_blinking_led.rst:387
msgid "**Step 3:** Run the code"
msgstr ""

#: ../1.1.1_blinking_led.rst:398
msgid "Here sudo - superuser do, and python means to run the file by Python."
msgstr ""

#: ../1.1.1_blinking_led.rst:402
msgid "**Step 4:** If you want to edit the code file 1.1.1_BlinkingLed.py, press ``Ctrl + C`` to stop running the code. Then type the following command to open 1.1.1_BlinkingLed.py:"
msgstr ""

#: ../1.1.1_blinking_led.rst:415
msgid "nano is a text editor tool. The command is used to open the code file 1.1.1_BlinkingLed.py by this tool."
msgstr ""

#: ../1.1.1_blinking_led.rst:418
msgid "Press ``Ctrl+X`` to exit. If you have modified the code, there will be a prompt asking whether to save the changes or not. Type in ``Y`` (save) or ``N`` (don’t save)."
msgstr ""

#: ../1.1.1_blinking_led.rst:422
msgid "Then press ``Enter`` to exit. Type in nano 1.1.1_BlinkingLed.py again to see the effect after the change."
msgstr ""

#: ../1.1.1_blinking_led.rst:429
msgid "You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, you need to go to  source code path like ``davinci-kit-for-raspberry-pi\\\\python``."
msgstr ""

#: ../1.1.1_blinking_led.rst:478
msgid "When the system detects this, it will search the installation path of python in the env setting, then call the corresponding interpreter to complete the operation. It’s to prevent the user not installing the python onto the /usr/bin default path."
msgstr ""

#: ../1.1.1_blinking_led.rst:487
msgid "In this way, import the RPi.GPIO library, then define a variable, GPIO to replace RPI.GPIO in the following code."
msgstr ""

#: ../1.1.1_blinking_led.rst:494
msgid "Import time package, for time delay function in the following program."
msgstr ""

#: ../1.1.1_blinking_led.rst:500
msgid "LED connects to the GPIO17 of the T-shape extension board, namely, BCM 17."
msgstr ""

#: ../1.1.1_blinking_led.rst:509
msgid "Set LedPin's mode to output, and initial level to High (3.3v)."
msgstr ""

#: ../1.1.1_blinking_led.rst:511
msgid "There are two ways of numbering the IO pins on a Raspberry Pi within RPi.GPIO: BOARD numbers and BCM numbers. In our lessons, what we use is BCM numbers. You need to set up every channel you are using as an input or an output."
msgstr ""

#: ../1.1.1_blinking_led.rst:520
msgid "Set GPIO17(BCM17) as 0V (low level). Since the cathode of LED is connected to GPIO17, thus the LED will light up."
msgstr ""

#: ../1.1.1_blinking_led.rst:527
msgid "Delay for 0.5 second. Here, the statement is delay function in C language, the unit is second."
msgstr ""

#: ../1.1.1_blinking_led.rst:534
msgid "Define a destroy function for clean up everything after the script finished."
msgstr ""

#: ../1.1.1_blinking_led.rst:547
msgid "This is the general running structure of the code. When the program starts to run, it initializes the pin by running the setup(), and then runs the code in the main() function to set the pin to high and low levels. When 'Ctrl+C' is pressed, the program, destroy() will be  executed."
msgstr ""

#: ../1.1.1_blinking_led.rst:554
msgid "Phenomenon Picture"
msgstr ""
