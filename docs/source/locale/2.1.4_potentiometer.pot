# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sunfounder
# This file is distributed under the same license as the SunFounder Da Vinci Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Da Vinci Kit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-07 09:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../2.1.4_potentiometer.rst:2
msgid "2.1.4 Potentiometer"
msgstr ""

#: ../2.1.4_potentiometer.rst:5
msgid "Introduction"
msgstr ""

#: ../2.1.4_potentiometer.rst:7
msgid "The ADC function can be used to convert analog signals to digital signals, and in this experiment, ADC0834 is used to get the function involving ADC. Here, we implement this process by using potentiometer. Potentiometer changes the physical quantity -- voltage, which is converted by the ADC function."
msgstr ""

#: ../2.1.4_potentiometer.rst:14
msgid "Components"
msgstr ""

#: ../2.1.4_potentiometer.rst:20
msgid "Principle"
msgstr ""

#: ../2.1.4_potentiometer.rst:22
msgid "**ADC0834**"
msgstr ""

#: ../2.1.4_potentiometer.rst:24
msgid "ADC0834 is an 8-bit `successive approximation <https://cn.bing.com/dict/search?q=successive approximations&FORM=BDVSP6&mkt=zh-cn>`__ analog-to-digital converter that is equipped with an input-configurable multichannel multi-plexer and serial input/output. The serial input/output is configured to interface with standard shift registers or microprocessors."
msgstr ""

#: ../2.1.4_potentiometer.rst:34
msgid "**Sequence of Operation**"
msgstr ""

#: ../2.1.4_potentiometer.rst:36
msgid "A conversion is initiated by setting CS low, which enables all logic circuits. CS must be held low for the complete conversion process. A clock input is then received from the processor. On each low-to-high transition of the clock input, the data on DI is clocked into the multiplexer address shift register. The first logic high on the input is the start bit. A 3- to 4-bit assignment word follows the start bit. On each successive low-to-high transition of the clock input, the start bit and assignment word are shifted through the shift register. When the start bit is shifted into the start location of the multiplexer register, the input channel is selected and conversion starts. The SAR Statu output (SARS) goes high to indicate that a conversion is in progress, and DI to the multiplexer shift register is disabled the duration of the conversion."
msgstr ""

#: ../2.1.4_potentiometer.rst:50
msgid "An interval of one clock period is automatically inserted to allow the selected multiplexed channel to settle. The data output DO comes out of the high-impedance state and provides a leading low for this one clock period of multiplexer settling time. The SAR comparator compares successive outputs from the resistive ladder with the incoming analog signal. The comparator output indicates whether the analog input is greater than or less than the resistive ladder output. As the conversion proceeds, conversion data is simultaneously output from the DO output pin, with the most significant bit (MSB) first."
msgstr ""

#: ../2.1.4_potentiometer.rst:60
msgid "After eight clock periods, the conversion is complete and the SARS output goes low. Finally outputs the least-significant-bit-first data after the MSB-first data stream."
msgstr ""

#: ../2.1.4_potentiometer.rst:67
msgid "**ADC0834 MUX ADDRESS CONTROL LOGIC TABLE**"
msgstr ""

#: ../2.1.4_potentiometer.rst:72
msgid "**Potentiometer**"
msgstr ""

#: ../2.1.4_potentiometer.rst:75
msgid "Potentiometer is also a resistance component with 3 terminals and its resistance value can be adjusted according to some regular variation. Potentiometer usually consists of resistor and movable brush. When the brush is moving along the resistor, there is a certain resistance or voltage output depending on the displacement."
msgstr ""

#: ../2.1.4_potentiometer.rst:84
msgid "The functions of the potentiometer in the circuit are as follows:"
msgstr ""

#: ../2.1.4_potentiometer.rst:86
msgid "Serving as a voltage divider"
msgstr ""

#: ../2.1.4_potentiometer.rst:88
msgid "Potentiometer is a continuously adjustable resistor. When you adjust the shaft or sliding handle of the potentiometer, the movable contact will slide on the resistor. At this point, a voltage can be output depending on the voltage applied onto the potentiometer and the angle the movable arm has rotated to or the distance it moves."
msgstr ""

#: ../2.1.4_potentiometer.rst:95
msgid "Schematic Diagram"
msgstr ""

#: ../2.1.4_potentiometer.rst:104
msgid "Experimental Procedures"
msgstr ""

#: ../2.1.4_potentiometer.rst:106
msgid "**Step 1:** Build the circuit."
msgstr ""

#: ../2.1.4_potentiometer.rst:112
msgid "Please place the chip by referring to the corresponding position depicted in the picture. Note that the grooves on the chip should be on the left when it is placed."
msgstr ""

#: ../2.1.4_potentiometer.rst:117
msgid "For C Language Users"
msgstr ""

#: ../2.1.4_potentiometer.rst:119
msgid "**Step 2:** Open the code file."
msgstr ""

#: ../2.1.4_potentiometer.rst:129
msgid "**Step 3:** Compile the code."
msgstr ""

#: ../2.1.4_potentiometer.rst:139
msgid "**Step 4:** Run."
msgstr ""

#: ../2.1.4_potentiometer.rst:149
#: ../2.1.4_potentiometer.rst:460
msgid "After the code runs, rotate the knob on the potentiometer, the intensity of LED will change accordingly."
msgstr ""

#: ../2.1.4_potentiometer.rst:152
#: ../2.1.4_potentiometer.rst:463
msgid "**Code**"
msgstr ""

#: ../2.1.4_potentiometer.rst:239
#: ../2.1.4_potentiometer.rst:511
msgid "**Code Explanation**"
msgstr ""

#: ../2.1.4_potentiometer.rst:248
msgid "Define CS, CLK, DIO of ADC0834, and connect them to GPIO0, GPIO1 and GPIO2 respectively. Then attach LED to GPIO3."
msgstr ""

#: ../2.1.4_potentiometer.rst:303
msgid "There is a function of ADC0834 to get Analog to Digital Conversion. The specific workflow is as follows:"
msgstr ""

#: ../2.1.4_potentiometer.rst:310
msgid "Set CS to low level and start enabling AD conversion."
msgstr ""

#: ../2.1.4_potentiometer.rst:319
msgid "When the low-to-high transition of the clock input occurs at the first time, set DIO to 1 as Start bit. In the following three steps, there are 3 assignment words."
msgstr ""

#: ../2.1.4_potentiometer.rst:330
msgid "As soon as the low-to-high transition of the clock input occurs for the second time, set DIO to 1 and choose SGL mode."
msgstr ""

#: ../2.1.4_potentiometer.rst:340
msgid "Once occurs for the third time, the value of DIO is controlled by the variable **odd**."
msgstr ""

#: ../2.1.4_potentiometer.rst:350
msgid "The pulse of CLK converted from low level to high level for the forth time, the value of DIO is controlled by the variable **sel**."
msgstr ""

#: ../2.1.4_potentiometer.rst:353
msgid "Under the condition that channel=0, sel=0, odd=0, the operational formulas concerning **sel** and **odd** are as follows:"
msgstr ""

#: ../2.1.4_potentiometer.rst:361
msgid "When the condition that channel=1, sel=0, odd=1 is met, please refer to the following address control logic table. Here CH1 is chosen, and the start bit is shifted into the start location of the multiplexer register and conversion starts."
msgstr ""

#: ../2.1.4_potentiometer.rst:375
msgid "Here, set DIO to 1 twice, please ignore it."
msgstr ""

#: ../2.1.4_potentiometer.rst:388
msgid "In the first for() statement, as soon as the fifth pulse of CLK is converted from high level to low level, set DIO to input mode. Then the conversion starts and the converted value is stored in the variable dat1. After eight clock periods, the conversion is complete."
msgstr ""

#: ../2.1.4_potentiometer.rst:402
msgid "In the second for() statement, output the converted values via DO after other eight clock periods and store them in the variable dat2."
msgstr ""

#: ../2.1.4_potentiometer.rst:411
msgid "return(dat1==dat2) ? dat1 : 0 is used to compare the value gotten during the conversion and the output value. If they are equal to each other, output the converting value dat1; otherwise, output 0. Here, the workflow of ADC0834 is complete."
msgstr ""

#: ../2.1.4_potentiometer.rst:420
msgid "The function is to use software to create a PWM pin, LedPin, then the initial pulse width is set to 0, and the period of PWM is 100 x 100us."
msgstr ""

#: ../2.1.4_potentiometer.rst:432
msgid "In the main program, read the value of channel 0 that has been connected with a potentiometer. And store the value in the variable analogVal then write it in LedPin. Now you can see the brightness of LED changing with the value of the potentiometer."
msgstr ""

#: ../2.1.4_potentiometer.rst:438
msgid "For Python Users"
msgstr ""

#: ../2.1.4_potentiometer.rst:440
msgid "**Step 2:** Open the code file"
msgstr ""

#: ../2.1.4_potentiometer.rst:450
msgid "**Step 3:** Run."
msgstr ""

#: ../2.1.4_potentiometer.rst:467
msgid "You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, you need to go to  source code path like ``davinci-kit-for-raspberry-pi\\\\python``."
msgstr ""

#: ../2.1.4_potentiometer.rst:517
msgid "import ADC0834 library. You can check the content of the library by calling the command nano ADC0834.py."
msgstr ""

#: ../2.1.4_potentiometer.rst:535
msgid "In setup(), define the naming method as BCM, set LedPin as PWM channel and render it a frequency of 2Khz."
msgstr ""

#: ../2.1.4_potentiometer.rst:538
msgid "**ADC0834.setup():** Initialize ADC0834, and connect the defined CS, CLK, DIO of ADC0834 to GPIO17, GPIO18 and GPIO27 respectively."
msgstr ""

#: ../2.1.4_potentiometer.rst:551
msgid "The function getResult() is used to read the analog values of the four channels of ADC0834. By default, the function reads the value of CH0, and if you want to read other channels, please input the channel number in **( )**, ex. getResult(1)."
msgstr ""

#: ../2.1.4_potentiometer.rst:556
msgid "The function loop() first reads the value of CH0, then assign the value to the variable res. After that, call the function MAP to map the read value of potentiometer to 0~100. This step is used to control the duty cycle of LedPin. Now, you may see that the brightness of LED is changing with the value of potentiometer."
msgstr ""

#: ../2.1.4_potentiometer.rst:564
msgid "Phenomenon Picture"
msgstr ""
