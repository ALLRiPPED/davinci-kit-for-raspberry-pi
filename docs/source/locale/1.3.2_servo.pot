# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sunfounder
# This file is distributed under the same license as the SunFounder Da Vinci Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Da Vinci Kit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-06 17:58+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../1.3.2_servo.rst:2
msgid "1.3.2 Servo"
msgstr ""

#: ../1.3.2_servo.rst:5
msgid "Introduction"
msgstr ""

#: ../1.3.2_servo.rst:7
msgid "In this lesson, we will learn how to make the servo rotate."
msgstr ""

#: ../1.3.2_servo.rst:10
msgid "Components"
msgstr ""

#: ../1.3.2_servo.rst:16
msgid "Principle"
msgstr ""

#: ../1.3.2_servo.rst:18
msgid "**Servo**"
msgstr ""

#: ../1.3.2_servo.rst:20
msgid "A servo is generally composed of the following parts: case, shaft, gear system, potentiometer, DC motor, and embedded board."
msgstr ""

#: ../1.3.2_servo.rst:26
msgid "It works like this: The microcontroller sends out PWM signals to the servo, and then the embedded board in the servo receives the signals through the signal pin and controls the motor inside to turn. As a result, the motor drives the gear system and then motivates the shaft after deceleration. The shaft and potentiometer of the servo are connected together. When the shaft rotates, it drives the potentiometer, so the potentiometer outputs a voltage signal to the embedded board. Then the board determines the direction and speed of rotation based on the current position, so it can stop exactly at the right position as defined and hold there."
msgstr ""

#: ../1.3.2_servo.rst:40
msgid "The angle is determined by the duration of a pulse that is applied to the control wire. This is called Pulse width Modulation. The servo expects to see a pulse every 20 ms. The length of the pulse will determine how far the motor turns. For example, a 1.5ms pulse will make the motor turn to the 90 degree position (neutral position)."
msgstr ""

#: ../1.3.2_servo.rst:46
msgid "When a pulse is sent to a servo that is less than 1.5 ms, the servo rotates to a position and holds its output shaft some number of degrees counterclockwise from the neutral point. When the pulse is wider than 1.5 ms the opposite occurs. The minimal width and the maximum width of pulse that will command the servo to turn to a valid position are functions of each servo. Generally the minimum pulse will be about 0.5 ms wide and the maximum pulse will be 2.5 ms wide."
msgstr ""

#: ../1.3.2_servo.rst:58
msgid "Schematic Diagram"
msgstr ""

#: ../1.3.2_servo.rst:64
msgid "Experimental Procedures"
msgstr ""

#: ../1.3.2_servo.rst:66
msgid "**Step 1:** Build the circuit."
msgstr ""

#: ../1.3.2_servo.rst:72
msgid "For C Language Users"
msgstr ""

#: ../1.3.2_servo.rst:74
#: ../1.3.2_servo.rst:198
msgid "**Step 2**: Go to the folder of the code."
msgstr ""

#: ../1.3.2_servo.rst:84
msgid "**Step 3**: Compile the code."
msgstr ""

#: ../1.3.2_servo.rst:94
msgid "**Step 4**: Run the executable file."
msgstr ""

#: ../1.3.2_servo.rst:104
#: ../1.3.2_servo.rst:218
msgid "After the program is executed, the servo will rotate from 0 degrees to 180 degrees, and then from 180 degrees to 0 degrees, circularly."
msgstr ""

#: ../1.3.2_servo.rst:107
#: ../1.3.2_servo.rst:221
msgid "**Code**"
msgstr ""

#: ../1.3.2_servo.rst:148
#: ../1.3.2_servo.rst:281
msgid "**Code Explanation**"
msgstr ""

#: ../1.3.2_servo.rst:156
msgid "Create a Map() function to map value in the following code."
msgstr ""

#: ../1.3.2_servo.rst:168
msgid "Create a funtion, setAngle() to write angle to the servo."
msgstr ""

#: ../1.3.2_servo.rst:174
msgid "This function can change the duty cycle of the PWM."
msgstr ""

#: ../1.3.2_servo.rst:176
msgid "To make the servo rotate to 0 ~ 180 °, the pulse width should change within the range of 0.5ms ~ 2.5ms when the period is 20ms; in the function, softPwmCreate(), we have set that the period is 200x100us=20ms, thus we need to map 0 ~ 180 to 5x100us ~ 25x100us."
msgstr ""

#: ../1.3.2_servo.rst:181
msgid "The prototype of this function is shown below."
msgstr ""

#: ../1.3.2_servo.rst:188
msgid "**Parameter pin:** Any GPIO pin of Raspberry Pi can be set as PWM pin."
msgstr ""

#: ../1.3.2_servo.rst:190
msgid "**Parameter initialValue:** The initial pulse width is that initialValue times 100us."
msgstr ""

#: ../1.3.2_servo.rst:193
msgid "**Parameter pwmRange:** the period of PWM is that pwmRange times 100us."
msgstr ""

#: ../1.3.2_servo.rst:196
msgid "For Python Language Users"
msgstr ""

#: ../1.3.2_servo.rst:208
msgid "**Step 3**: Run the executable file."
msgstr ""

#: ../1.3.2_servo.rst:225
msgid "You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, you need to go to  source code path like ``davinci-kit-for-raspberry-pi\\\\python``."
msgstr ""

#: ../1.3.2_servo.rst:288
msgid "Set the servoPin to PWM pin, then the frequency to 50hz, and the period to 20ms."
msgstr ""

#: ../1.3.2_servo.rst:290
msgid "p.start(0): Run the PWM function，and set the initial value to 0."
msgstr ""

#: ../1.3.2_servo.rst:300
msgid "Create a function, setAngle() to write angle that ranges from 0 to 180 into the servo."
msgstr ""

#: ../1.3.2_servo.rst:306
msgid "This code is used to limit the angle within the range 0-180°."
msgstr ""

#: ../1.3.2_servo.rst:308
msgid "The min() function returns the minimum of the input values. If 180<angle, then return 180,if not, return angle."
msgstr ""

#: ../1.3.2_servo.rst:311
msgid "The max() method returns the maximum element in an iterable or largest of two or more parameters. If 0>angle, then return 0, if not, return angle."
msgstr ""

#: ../1.3.2_servo.rst:320
msgid "To render a range 0 ~ 180 ° to the servo, the pulse width of the servo is set to 0.5ms(500us)-2.5ms(2500us)."
msgstr ""

#: ../1.3.2_servo.rst:323
msgid "The period of PWM is 20ms(20000us), thus the duty cycle of PWM is (500/20000)%-(2500/20000)%, and the range 0 ~ 180 is mapped to 2.5 ~ 12.5."
msgstr ""

#: ../1.3.2_servo.rst:329
msgid "Phenomenon Picture"
msgstr ""
