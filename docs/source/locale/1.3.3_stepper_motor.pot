# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sunfounder
# This file is distributed under the same license as the SunFounder Da Vinci Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Da Vinci Kit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-06 17:58+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../1.3.3_stepper_motor.rst:2
msgid "1.3.3 Stepper Motor"
msgstr ""

#: ../1.3.3_stepper_motor.rst:5
msgid "Introduction"
msgstr ""

#: ../1.3.3_stepper_motor.rst:7
msgid "Stepper motors, due to their unique design, can be controlled to a high degree of accuracy without any feedback mechanisms. The shaft of a stepper, mounted with a series of magnets, is controlled by a series of electromagnetic coils that are charged positively and negatively in a specific sequence, precisely moving it forward or backward in small \"steps\"."
msgstr ""

#: ../1.3.3_stepper_motor.rst:15
msgid "Components"
msgstr ""

#: ../1.3.3_stepper_motor.rst:21
msgid "Principle"
msgstr ""

#: ../1.3.3_stepper_motor.rst:23
msgid "**Stepper Motor**"
msgstr ""

#: ../1.3.3_stepper_motor.rst:25
msgid "There are two types of steppers, unipolars and bipolars, and it is very important to know which type you are working with. In this experiment, we will use a unipolar stepper."
msgstr ""

#: ../1.3.3_stepper_motor.rst:29
msgid "The stepper motor is a four-phase one, which uses a unipolarity DC power supply. As long as you electrify all phase windings of the motor by an appropriate timing sequence, you can make it rotate step by step. The schematic diagram of a four-phase reactive stepper motor:"
msgstr ""

#: ../1.3.3_stepper_motor.rst:37
msgid "In the figure, in the middle of the motor is a rotor - a gear-shaped permanent magnet. Around the rotor, 0 to 5 are teeth. Then more outside, there are 8 magnetic poles, with each two opposite ones connected by coil winding. So they form four pairs from A to D, which is called a phase. It has four lead wires to be connected with switches SA, SB, SC, and SD. Therefore, the four phases are in parallel in the circuit, and the two magnetic poles in one phase are in series."
msgstr ""

#: ../1.3.3_stepper_motor.rst:45
msgid "**Here's how a 4-phase stepper motor works:**"
msgstr ""

#: ../1.3.3_stepper_motor.rst:47
msgid "When switch SB is power on, switch SA, SC, and SD is power off, and B-phase magnetic poles align with tooth 0 and 3 of the rotor. At the same time, tooth 1 and 4 generate staggered teeth with C- and D-phase poles. Tooth 2 and 5 generate staggered teeth with D- and A-phase poles. When switch SC is power on, switch SB, SA, and SD is power off, the rotor rotates under magnetic field of C-phase winding and that between tooth 1 and 4. Then tooth 1 and 4 align with the magnetic poles of C-phase winding. While tooth 0 and 3 generate staggered teeth with A- and B-phase poles, and tooth 2 and 5 generate staggered teeth with the magnetic poles of A- and D-phase poles. The similar situation goes on and on. Energize the A, B, C and D phases in turn, and the rotor will rotate in the order of A, B, C and D."
msgstr ""

#: ../1.3.3_stepper_motor.rst:63
msgid "The four-phase stepper motor has three operating modes: single four-step, double four-step, and eight-step. The step angle for the single four-step and double four-step are the same, but the driving torque for the single four-step is smaller. The step angle of the eight-step is half that of the single four-step and double four-step. Thus, the eight-step operating mode can keep high driving torque and improve control accuracy."
msgstr ""

#: ../1.3.3_stepper_motor.rst:71
msgid "The stator of Stepper Motor we use has 32 magnetic poles, so a circle needs 32 steps. The output shaft of the Stepper Motor is connected with a reduction gear set, and the reduction ratio is 1/64. So the final output shaft rotates a circle requiring a 32*64=2048 step."
msgstr ""

#: ../1.3.3_stepper_motor.rst:76
msgid "**ULN2003**"
msgstr ""

#: ../1.3.3_stepper_motor.rst:78
msgid "To apply the motor in the circuit, a driver board needs to be used. Stepper Motor Driver-ULN2003 is a 7-channel inverter circuit. That is, when the input pin is at high level, the output pin of ULN2003 is at low level, and vice versa. If we supply high level to IN1, and low level to IN2, IN3 and IN4, then the output end OUT1 is at low level, and all the other output ends are at high level.  The internal structure of the chip is shown as below."
msgstr ""

#: ../1.3.3_stepper_motor.rst:84
msgid "The stepper motor driver constituted by ULN2003 chip and 4 LEDs is shown as follows. On the board, IN1,IN2,IN3 and IN4 work as input and the four LEDs, A, B, C, D are the indicators of input pin. In addition, OUT1,OUT2, OUT3 and OUT4 are connected to SA, SB, SC and SD on the stepper motor driver. When the value of IN1 is set to a high level, A lights up; switch SA is power on, and the stepper motor rotates one step. The similar case repeats on and on. Therefore, just give the stepper motor a specific timing sequence, it will rotate step by step. The ULN2003 here is used to provide particular timing sequences for the stepper motor."
msgstr ""

#: ../1.3.3_stepper_motor.rst:99
msgid "Schematic Diagram"
msgstr ""

#: ../1.3.3_stepper_motor.rst:106
msgid "Experimental Procedures"
msgstr ""

#: ../1.3.3_stepper_motor.rst:108
msgid "**Step 1:** Build the circuit."
msgstr ""

#: ../1.3.3_stepper_motor.rst:114
msgid "For C Language Users"
msgstr ""

#: ../1.3.3_stepper_motor.rst:116
#: ../1.3.3_stepper_motor.rst:344
msgid "**Step 2**: Go to the folder of the code."
msgstr ""

#: ../1.3.3_stepper_motor.rst:126
msgid "**Step 3**: Compile the code."
msgstr ""

#: ../1.3.3_stepper_motor.rst:136
msgid "**Step 4**: Run the executable file."
msgstr ""

#: ../1.3.3_stepper_motor.rst:146
msgid "As the code runs, the stepper motor will rotate clockwise or anticlockwise according to your input ‘a’ or ‘c’."
msgstr ""

#: ../1.3.3_stepper_motor.rst:149
#: ../1.3.3_stepper_motor.rst:367
msgid "**Code**"
msgstr ""

#: ../1.3.3_stepper_motor.rst:221
#: ../1.3.3_stepper_motor.rst:430
msgid "**Code Explanation**"
msgstr ""

#: ../1.3.3_stepper_motor.rst:229
#: ../1.3.3_stepper_motor.rst:438
msgid "**rolePerMinute:** revolutions per minute, the RPM of the stepper motor used in this kit should be 0~17."
msgstr ""

#: ../1.3.3_stepper_motor.rst:232
#: ../1.3.3_stepper_motor.rst:441
msgid "**stepPerRevolution:** the number of steps for each turn, and the stepper motor used in this kit needs 2048 steps per revolution."
msgstr ""

#: ../1.3.3_stepper_motor.rst:235
msgid "**stepSpeed:** the time used for each step, and in main(), we assign the values to them:「(60000000 / rolePerMinute) / stepsPerRevolution」(60,000,000 us=1minute)"
msgstr ""

#: ../1.3.3_stepper_motor.rst:269
msgid "The loop() function is roughly divided into two parts (located between two while(1)) :"
msgstr ""

#: ../1.3.3_stepper_motor.rst:271
#: ../1.3.3_stepper_motor.rst:466
msgid "The first part is to get the key value. When 'a' or 'c' is obtained, exit the loop and stop the input."
msgstr ""

#: ../1.3.3_stepper_motor.rst:273
#: ../1.3.3_stepper_motor.rst:469
msgid "The second part calls rotary(direction) to make the stepper motor run."
msgstr ""

#: ../1.3.3_stepper_motor.rst:294
msgid "To make stepper motor **rotate clockwise**, level status of motorPin should is shown in the table below:"
msgstr ""

#: ../1.3.3_stepper_motor.rst:300
#: ../1.3.3_stepper_motor.rst:492
msgid "Therefore, potential write of MotorPin is implemented by using a two-layer of for loop."
msgstr ""

#: ../1.3.3_stepper_motor.rst:303
#: ../1.3.3_stepper_motor.rst:327
#: ../1.3.3_stepper_motor.rst:495
#: ../1.3.3_stepper_motor.rst:519
msgid "In Step1, j=0, i=0~4."
msgstr ""

#: ../1.3.3_stepper_motor.rst:305
#: ../1.3.3_stepper_motor.rst:497
msgid "motorPin[0] will be written in the high level（10011001&00001000=1）"
msgstr ""

#: ../1.3.3_stepper_motor.rst:307
#: ../1.3.3_stepper_motor.rst:499
msgid "motorPin[1] will be written in the low level（10011001&00000100=0）"
msgstr ""

#: ../1.3.3_stepper_motor.rst:309
#: ../1.3.3_stepper_motor.rst:501
msgid "motorPin[2] will be written in the low level（10011001&00000010=0）"
msgstr ""

#: ../1.3.3_stepper_motor.rst:311
#: ../1.3.3_stepper_motor.rst:503
msgid "motorPin[3] will be written in the high level（10011001&00000001=1）"
msgstr ""

#: ../1.3.3_stepper_motor.rst:313
#: ../1.3.3_stepper_motor.rst:505
#: ../1.3.3_stepper_motor.rst:525
msgid "In Step2, j=1, i=0~4."
msgstr ""

#: ../1.3.3_stepper_motor.rst:315
#: ../1.3.3_stepper_motor.rst:507
msgid "motorPin[0] will be written in the high level（01001100&00001000=1）"
msgstr ""

#: ../1.3.3_stepper_motor.rst:317
#: ../1.3.3_stepper_motor.rst:509
msgid "motorPin[1] will be written in the low level（01001100&00000100=1）"
msgstr ""

#: ../1.3.3_stepper_motor.rst:319
#: ../1.3.3_stepper_motor.rst:339
msgid "and so on."
msgstr ""

#: ../1.3.3_stepper_motor.rst:321
msgid "And to make the stepper motor rotate **anti-clockwise**, the level status of motorPin is shown in the following table."
msgstr ""

#: ../1.3.3_stepper_motor.rst:329
#: ../1.3.3_stepper_motor.rst:521
msgid "motorPin[0] will be written in the high level（10011001&10000000=1）"
msgstr ""

#: ../1.3.3_stepper_motor.rst:331
#: ../1.3.3_stepper_motor.rst:523
msgid "motorPin[1] will be written in the low level（10011001&01000000=0）"
msgstr ""

#: ../1.3.3_stepper_motor.rst:333
msgid "In Step2，j=1, i=0~4."
msgstr ""

#: ../1.3.3_stepper_motor.rst:335
#: ../1.3.3_stepper_motor.rst:527
msgid "motorPin[0] will be written in the high level（00110010&10000000=0）"
msgstr ""

#: ../1.3.3_stepper_motor.rst:337
#: ../1.3.3_stepper_motor.rst:529
msgid "motorPin[1] will be written in the low level（00110010&01000000=0）"
msgstr ""

#: ../1.3.3_stepper_motor.rst:342
msgid "For Python Language Users"
msgstr ""

#: ../1.3.3_stepper_motor.rst:354
msgid "**Step 3**: Run the executable file."
msgstr ""

#: ../1.3.3_stepper_motor.rst:364
msgid "As the code runs, the stepper motor will turn clockwise or anti-clockwise depending on your input 'a' or 'c'."
msgstr ""

#: ../1.3.3_stepper_motor.rst:371
msgid "You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, you need to go to  source code path like ``davinci-kit-for-raspberry-pi\\\\python``."
msgstr ""

#: ../1.3.3_stepper_motor.rst:444
msgid "**stepSpeed:** the time used for each step, and we assign the values to them:「(60 / rolePerMinute) / stepsPerRevolution」(60s=1minute)."
msgstr ""

#: ../1.3.3_stepper_motor.rst:463
msgid "The loop() function is roughly divided into two parts (located in two while(1)) :"
msgstr ""

#: ../1.3.3_stepper_motor.rst:486
msgid "To make the stepper motor rotate clockwise, the level status of motorPin is shown in the following table:"
msgstr ""

#: ../1.3.3_stepper_motor.rst:511
msgid "and so on"
msgstr ""

#: ../1.3.3_stepper_motor.rst:513
msgid "And to make the stepper motor rotate anti - clockwise, the level status of motorPin is shown in the following table."
msgstr ""

#: ../1.3.3_stepper_motor.rst:531
msgid "And so on."
msgstr ""

#: ../1.3.3_stepper_motor.rst:534
msgid "Phenomenon Picture"
msgstr ""
