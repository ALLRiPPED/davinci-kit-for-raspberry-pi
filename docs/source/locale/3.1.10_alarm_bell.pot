# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sunfounder
# This file is distributed under the same license as the SunFounder Da Vinci Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Da Vinci Kit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-07 09:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../3.1.10_alarm_bell.rst:2
msgid "3.1.10 Alarm Bell"
msgstr ""

#: ../3.1.10_alarm_bell.rst:5
msgid "Introduction"
msgstr ""

#: ../3.1.10_alarm_bell.rst:7
msgid "In this course, we will make a manual alarm device. You can replace the toggle switch with a thermistor or a photosensitive sensor to make a temperature alarm or a light alarm."
msgstr ""

#: ../3.1.10_alarm_bell.rst:12
msgid "Components"
msgstr ""

#: ../3.1.10_alarm_bell.rst:18
msgid "Schematic Diagram"
msgstr ""

#: ../3.1.10_alarm_bell.rst:21
msgid "T-Board Name"
msgstr ""

#: ../3.1.10_alarm_bell.rst:21
msgid "physical"
msgstr ""

#: ../3.1.10_alarm_bell.rst:21
msgid "wiringPi"
msgstr ""

#: ../3.1.10_alarm_bell.rst:21
msgid "BCM"
msgstr ""

#: ../3.1.10_alarm_bell.rst:22
msgid "GPIO17"
msgstr ""

#: ../3.1.10_alarm_bell.rst:22
msgid "Pin 11"
msgstr ""

#: ../3.1.10_alarm_bell.rst:22
msgid "0"
msgstr ""

#: ../3.1.10_alarm_bell.rst:22
msgid "17"
msgstr ""

#: ../3.1.10_alarm_bell.rst:23
msgid "GPIO18"
msgstr ""

#: ../3.1.10_alarm_bell.rst:23
msgid "Pin 12"
msgstr ""

#: ../3.1.10_alarm_bell.rst:23
msgid "1"
msgstr ""

#: ../3.1.10_alarm_bell.rst:23
msgid "18"
msgstr ""

#: ../3.1.10_alarm_bell.rst:24
msgid "GPIO27"
msgstr ""

#: ../3.1.10_alarm_bell.rst:24
msgid "Pin 13"
msgstr ""

#: ../3.1.10_alarm_bell.rst:24
msgid "2"
msgstr ""

#: ../3.1.10_alarm_bell.rst:24
msgid "27"
msgstr ""

#: ../3.1.10_alarm_bell.rst:25
msgid "GPIO22"
msgstr ""

#: ../3.1.10_alarm_bell.rst:25
msgid "Pin 15"
msgstr ""

#: ../3.1.10_alarm_bell.rst:25
msgid "3"
msgstr ""

#: ../3.1.10_alarm_bell.rst:25
msgid "22"
msgstr ""

#: ../3.1.10_alarm_bell.rst:32
msgid "Experimental Procedures"
msgstr ""

#: ../3.1.10_alarm_bell.rst:34
msgid "**Step 1**: Build the circuit."
msgstr ""

#: ../3.1.10_alarm_bell.rst:None
msgid "Alarm Bell_bb"
msgstr ""

#: ../3.1.10_alarm_bell.rst:42
msgid "**For C Language Users**"
msgstr ""

#: ../3.1.10_alarm_bell.rst:44
msgid "**Step 2**: Change directory."
msgstr ""

#: ../3.1.10_alarm_bell.rst:54
msgid "**Step 3**: Compile."
msgstr ""

#: ../3.1.10_alarm_bell.rst:64
msgid "**Step 4**: Run."
msgstr ""

#: ../3.1.10_alarm_bell.rst:74
#: ../3.1.10_alarm_bell.rst:235
msgid "After the program starts, the toggle switch will be toggled to the right, and the buzzer will give out alarm sounds. At the same time, the red and green LEDs will flash at a certain frequency."
msgstr ""

#: ../3.1.10_alarm_bell.rst:78
#: ../3.1.10_alarm_bell.rst:334
msgid "**Code Explanation**"
msgstr ""

#: ../3.1.10_alarm_bell.rst:84
msgid "In this code, you'll use a new library, pthread.h, which is a set of common thread libraries and can realize multithreading. We add the **-lpthread** parameter at compile time for the independent working of the LED and the buzzer."
msgstr ""

#: ../3.1.10_alarm_bell.rst:106
#: ../3.1.10_alarm_bell.rst:356
msgid "The function ledWork() helps to set the working state of these 2 LEDs: it keeps the green LED lighting up for 0.5s and then turns off; similarly, keeps the red LED lighting up for 0.5s and then turns off."
msgstr ""

#: ../3.1.10_alarm_bell.rst:127
#: ../3.1.10_alarm_bell.rst:372
msgid "The function buzzWork() is used to set the working state of the buzzer. Here we set the frequency as between 130 and 800, to accumulate or decay at an interval of 20."
msgstr ""

#: ../3.1.10_alarm_bell.rst:145
#: ../3.1.10_alarm_bell.rst:387
msgid "In the function on():"
msgstr ""

#: ../3.1.10_alarm_bell.rst:147
#: ../3.1.10_alarm_bell.rst:389
msgid "Define the mark “flag=1”, indicating the ending of the control thread."
msgstr ""

#: ../3.1.10_alarm_bell.rst:150
msgid "Create a software-controlled tone pin **BeepPin**."
msgstr ""

#: ../3.1.10_alarm_bell.rst:152
msgid "Create two separate threads so that the LED and the buzzer can work at the same time."
msgstr ""

#: ../3.1.10_alarm_bell.rst:155
msgid "**pthread_t tLed:** Declare a thread **tLed**."
msgstr ""

#: ../3.1.10_alarm_bell.rst:157
msgid "**pthread_create(&tLed,NULL,ledWork,NULL)：**\\ Create the thread and its prototype is as follows:"
msgstr ""

#: ../3.1.10_alarm_bell.rst:160
msgid "int pthread_create(pthread_t \\*restrict tidp,const pthread_attr_t \\*restrict_attr,void*（*start_rtn)(void*),void \\*restrict arg);"
msgstr ""

#: ../3.1.10_alarm_bell.rst:163
msgid "**Return the Value**"
msgstr ""

#: ../3.1.10_alarm_bell.rst:165
msgid "If successful, return “\\ **0**\\ ”；otherwise, return the **fall number** “\\ **-1**\\ ”."
msgstr ""

#: ../3.1.10_alarm_bell.rst:168
msgid "**Parameter**"
msgstr ""

#: ../3.1.10_alarm_bell.rst:170
msgid "The first parameter is a pointer to the thread identifier."
msgstr ""

#: ../3.1.10_alarm_bell.rst:171
msgid "The second one is used to set the thread attribute."
msgstr ""

#: ../3.1.10_alarm_bell.rst:172
msgid "The third one is the starting address of the thread running function."
msgstr ""

#: ../3.1.10_alarm_bell.rst:173
msgid "The last one is the one that runs the function."
msgstr ""

#: ../3.1.10_alarm_bell.rst:185
#: ../3.1.10_alarm_bell.rst:419
msgid "The function Off() defines “flag=0” so as to exit the threads **ledWork** and **BuzzWork** and then turn off the buzzer and the LED."
msgstr ""

#: ../3.1.10_alarm_bell.rst:206
#: ../3.1.10_alarm_bell.rst:434
msgid "Main() contains the whole process of the program: firstly read the value of the slide switch; if the toggle switch is toggled to the right (the reading is 1), the function on() is called, the buzzer is driven to emit sounds and the the red and the green LEDs blink. Otherwise, the buzzer and the LED don’t work."
msgstr ""

#: ../3.1.10_alarm_bell.rst:213
msgid "**For Python Language Users**"
msgstr ""

#: ../3.1.10_alarm_bell.rst:215
msgid "**Step 2:** Change directory."
msgstr ""

#: ../3.1.10_alarm_bell.rst:225
msgid "**Step 3:** Run."
msgstr ""

#: ../3.1.10_alarm_bell.rst:239
msgid "**Code**"
msgstr ""

#: ../3.1.10_alarm_bell.rst:243
msgid "You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, you need to go to  source code path like ``davinci-kit-for-raspberry-pi\\\\python``."
msgstr ""

#: ../3.1.10_alarm_bell.rst:340
msgid "Here, we import the **Threading** module and it allows you to do multiple things at once, while normal programs can only execute code from top to bottom. With **Threading** modules, the LED and the buzzer can work separately."
msgstr ""

#: ../3.1.10_alarm_bell.rst:392
msgid "Start the Buzz, and set the duty cycle to 50%."
msgstr ""

#: ../3.1.10_alarm_bell.rst:394
msgid "Create **2** separate threads so that the LED and the buzzer can work at the same time."
msgstr ""

#: ../3.1.10_alarm_bell.rst:397
msgid "tBuzz = threading.Thread(target=buzzerWork)\\ **：**\\ Create the thread and its prototype is as follows:"
msgstr ""

#: ../3.1.10_alarm_bell.rst:401
msgid "class threading.Thread(group=None, target=None, name=None, args=(), kwargs={}, \\*, daemon=None)"
msgstr ""

#: ../3.1.10_alarm_bell.rst:403
msgid "Among the construction methods, the principal parameter is **target**, we need to assign a callable object (here are the functions **ledWork** and **BuzzWork**) to **target**."
msgstr ""

#: ../3.1.10_alarm_bell.rst:407
msgid "Next **start()** is called to start the thread object, ex., tBuzz.start() is used to start the newly installed tBuzz thread."
msgstr ""

#: ../3.1.10_alarm_bell.rst:441
msgid "Phenomenon Picture"
msgstr ""
