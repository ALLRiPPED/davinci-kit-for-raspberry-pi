# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sunfounder
# This file is distributed under the same license as the SunFounder Da Vinci Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Da Vinci Kit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-06 17:51+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../1.2.2_passive_buzzer.rst:2
msgid "1.2.2 Passive Buzzer"
msgstr ""

#: ../1.2.2_passive_buzzer.rst:5
msgid "Introduction"
msgstr ""

#: ../1.2.2_passive_buzzer.rst:7
msgid "In this lesson, we will learn how to make a passive buzzer play music."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:10
msgid "Components"
msgstr ""

#: ../1.2.2_passive_buzzer.rst:16
msgid "Schematic Diagram"
msgstr ""

#: ../1.2.2_passive_buzzer.rst:18
msgid "In this experiment, a passive buzzer, a PNP transistor and a 1k resistor are used between the base of the transistor and GPIO to protect the transistor."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:22
msgid "When GPIO17 is given different frequencies, the passive buzzer will emit different sounds; in this way, the buzzer plays music."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:29
msgid "Experimental Procedures"
msgstr ""

#: ../1.2.2_passive_buzzer.rst:31
msgid "**Step 1**: Build the circuit."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:37
msgid "For C Language Users"
msgstr ""

#: ../1.2.2_passive_buzzer.rst:39
msgid "**Step 2**: Change directory."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:49
msgid "**Step 3**: Compile."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:59
msgid "**Step 4**: Run."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:69
#: ../1.2.2_passive_buzzer.rst:241
msgid "The code run, the buzzer plays a piece of music."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:71
#: ../1.2.2_passive_buzzer.rst:243
msgid "**Code**"
msgstr ""

#: ../1.2.2_passive_buzzer.rst:149
#: ../1.2.2_passive_buzzer.rst:320
msgid "**Code Explanation**"
msgstr ""

#: ../1.2.2_passive_buzzer.rst:165
msgid "These frequencies of each note are as shown. CL refers to low note, CM middle note, CH high note, 1-7 correspond to the notes C, D, E, F, G, A, B."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:176
msgid "The array, song_1[] stores a musical score of a song in which beat_1[] refers to the beat of each note in the song (0.5s for each beat)."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:185
msgid "This creates a software controlled tone pin. You can use any GPIO pin and the pin numbering will be that of the wiringPiSetup() function you used. The return value is 0 for success. Anything else and you should check the global errnovariable to see what went wrong."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:197
msgid "Employ a for statement to play song_1."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:199
msgid "In the judgment condition, **i<sizeof(song_1)/4**\\ ，“devide by 4” is used because the array song_1[] is an array of the data type of integer, and each element takes up four bytes."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:203
msgid "The number of elements in song_1 (the number of musical notes) is gotten by deviding sizeof(song_4) by 4."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:206
msgid "To enable each note to play for beat \\* 500ms, the function delay(beat_1[i] \\* 500) is called."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:209
msgid "The prototype of softToneWrite(BuzPin, song_1[i])："
msgstr ""

#: ../1.2.2_passive_buzzer.rst:215
msgid "This updates the tone frequency value on the given pin. The tone does not stop playing until you set the frequency to 0."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:219
msgid "For Python Language Users"
msgstr ""

#: ../1.2.2_passive_buzzer.rst:221
msgid "**Step 2: Change directory.**"
msgstr ""

#: ../1.2.2_passive_buzzer.rst:231
msgid "**Step 3: Run.**"
msgstr ""

#: ../1.2.2_passive_buzzer.rst:247
msgid "You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, you need to go to  source code path like ``davinci-kit-for-raspberry-pi\\\\python``."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:328
msgid "These are the frequencies of each note. The first 0 is to skip CL[0] so that the number 1-7 corresponds to the CDEFGAB of the tone."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:338
msgid "These arrays are the notes of a song."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:346
msgid "Every sound beat (each number) represents the ⅛ beat, or 0.5s"
msgstr ""

#: ../1.2.2_passive_buzzer.rst:353
msgid "Define pin Buzzer as PWM pin, then set its frequency to 440 and Buzz.start(50) is used to run PWM. What’s more, set the duty cycle to 50%."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:362
msgid "Run a for loop, then the buzzer will play the notes in the array song_1[] with the beats in the beat_1[] array, ."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:365
msgid "Now you can hear the passive buzzer playing music."
msgstr ""

#: ../1.2.2_passive_buzzer.rst:368
msgid "Phenomenon Picture"
msgstr ""
