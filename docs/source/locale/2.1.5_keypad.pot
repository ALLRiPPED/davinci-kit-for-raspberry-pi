# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sunfounder
# This file is distributed under the same license as the SunFounder Da Vinci Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Da Vinci Kit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-06 17:58+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../2.1.5_keypad.rst:2
msgid "2.1.5 Keypad"
msgstr ""

#: ../2.1.5_keypad.rst:5
msgid "Introduction"
msgstr ""

#: ../2.1.5_keypad.rst:7
msgid "A keypad is a rectangular array of buttons. In this project, We will use it input characters."
msgstr ""

#: ../2.1.5_keypad.rst:11
msgid "Components"
msgstr ""

#: ../2.1.5_keypad.rst:17
msgid "Principle"
msgstr ""

#: ../2.1.5_keypad.rst:19
msgid "**Keypad**"
msgstr ""

#: ../2.1.5_keypad.rst:21
msgid "A keypad is a rectangular array of 12 or 16 OFF-(ON) buttons. Their contacts are accessed via a header suitable for connection with a ribbon cable or insertion into a printed circuit board. In some keypads, each button connects with a separate contact in the header, while all the buttons share a common ground."
msgstr ""

#: ../2.1.5_keypad.rst:30
msgid "More often, the buttons are matrix encoded, meaning that each of them bridges a unique pair of conductors in a matrix. This configuration is suitable for polling by a microcontroller, which can be programmed to send an output pulse to each of the four horizontal wires in turn. During each pulse, it checks the remaining four vertical wires in sequence, to determine which one, if any, is carrying a signal. Pullup or pulldown resistors should be added to the input wires to prevent the inputs of the microcontroller from behaving unpredictably when no signal is present."
msgstr ""

#: ../2.1.5_keypad.rst:41
msgid "Schematic Diagram"
msgstr ""

#: ../2.1.5_keypad.rst:50
msgid "Experimental Procedures"
msgstr ""

#: ../2.1.5_keypad.rst:52
msgid "**Step 1:** Build the circuit."
msgstr ""

#: ../2.1.5_keypad.rst:58
msgid "For C Language Users"
msgstr ""

#: ../2.1.5_keypad.rst:60
#: ../2.1.5_keypad.rst:342
msgid "**Step 2:** Open the code file."
msgstr ""

#: ../2.1.5_keypad.rst:70
msgid "**Step 3:** Compile the code."
msgstr ""

#: ../2.1.5_keypad.rst:80
msgid "**Step 4:** Run."
msgstr ""

#: ../2.1.5_keypad.rst:90
#: ../2.1.5_keypad.rst:362
msgid "After the code runs, the values of pressed buttons on keypad (button Value) will be printed on the screen."
msgstr ""

#: ../2.1.5_keypad.rst:93
#: ../2.1.5_keypad.rst:365
msgid "**Code**"
msgstr ""

#: ../2.1.5_keypad.rst:208
#: ../2.1.5_keypad.rst:434
msgid "**Code Explanation**"
msgstr ""

#: ../2.1.5_keypad.rst:221
#: ../2.1.5_keypad.rst:449
msgid "Declare each key of the matrix keyboard to the array keys[] and define the pins on each row and column."
msgstr ""

#: ../2.1.5_keypad.rst:236
#: ../2.1.5_keypad.rst:462
msgid "This is the part of the main function that reads and prints the button value."
msgstr ""

#: ../2.1.5_keypad.rst:239
#: ../2.1.5_keypad.rst:465
msgid "The function keyRead() will read the state of every button."
msgstr ""

#: ../2.1.5_keypad.rst:241
msgid "KeyCompare() and keyCopy() are used to judge whether the state of a button has changed (that is, a button has been pressed or released)."
msgstr ""

#: ../2.1.5_keypad.rst:244
msgid "keyPrint() will print the button value of the button whose current level is high level (the button is pressed)."
msgstr ""

#: ../2.1.5_keypad.rst:267
msgid "This function assigns a high level to each row in turn, and when the key in the column is pressed, the column in which the key is located gets a high level. After the two-layer loop judgment, the key state compilation will generate an array (reasult[])."
msgstr ""

#: ../2.1.5_keypad.rst:272
msgid "When pressing button 3:"
msgstr ""

#: ../2.1.5_keypad.rst:277
msgid "RowPin [0] writes in the high level, and colPin[2] gets the high level. ColPin [0], colPin[1], colPin[3] get the low level."
msgstr ""

#: ../2.1.5_keypad.rst:280
msgid "This gives us 0,0,1,0. When rowPin[1], rowPin[2] and rowPin[3] are written in high level, colPin[0]~colPin[4] will get low level."
msgstr ""

#: ../2.1.5_keypad.rst:283
msgid "After the loop judgment is completed, an array will be generated:"
msgstr ""

#: ../2.1.5_keypad.rst:311
msgid "These two functions are used to judge whether the key state has changed, for example when you release your hand when pressing '3' or pressing '2', keyCompare() returns false."
msgstr ""

#: ../2.1.5_keypad.rst:315
msgid "KeyCopy() is used to re-write the current button value for the a array (last_key_pressed[BUTTON_NUM]) after each comparison. So we can compare them next time."
msgstr ""

#: ../2.1.5_keypad.rst:334
msgid "This function is used to print the value of the button currently pressed. If the button '1' is pressed, the '1' will be printed. If the button '1' is pressed and the button '3' is pressed, the '1, 3' will be printed."
msgstr ""

#: ../2.1.5_keypad.rst:340
msgid "For Python Language Users"
msgstr ""

#: ../2.1.5_keypad.rst:352
msgid "**Step 3:** Run."
msgstr ""

#: ../2.1.5_keypad.rst:369
msgid "You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, you need to go to  source code path like ``davinci-kit-for-raspberry-pi\\\\python``."
msgstr ""

#: ../2.1.5_keypad.rst:467
msgid "The statement if len(pressed_keys) != 0 and last_key_pressed != pressed_keys is used to judge"
msgstr ""

#: ../2.1.5_keypad.rst:470
msgid "whether a key is pressed and the state of the pressed button. (If you press '3' when you press '1', the judgement is tenable.)"
msgstr ""

#: ../2.1.5_keypad.rst:473
msgid "Prints the value of the currently pressed key when the condition is tenable."
msgstr ""

#: ../2.1.5_keypad.rst:476
msgid "The statement last_key_pressed = pressed_keys assigns the state of each judgment to an array last_key_pressed to facilitate the next round of conditional judgment."
msgstr ""

#: ../2.1.5_keypad.rst:493
msgid "This function assigns a high level to each row in turn, and when the button in the column is pressed, the column in which the key is located gets a high level. After the two-layer loop is judged, the value of the button whose state is 1 is stored in the array pressed_keys."
msgstr ""

#: ../2.1.5_keypad.rst:498
msgid "If you press the key '3':"
msgstr ""

#: ../2.1.5_keypad.rst:503
msgid "rowPins[0] is written in high level, and colPins[2] gets high level."
msgstr ""

#: ../2.1.5_keypad.rst:505
msgid "colPins[0]、colPins[1]、colPins[3] get low level."
msgstr ""

#: ../2.1.5_keypad.rst:507
msgid "There are four states:0, 0, 1, 0; and we write ‘3’ into pressed_keys."
msgstr ""

#: ../2.1.5_keypad.rst:509
msgid "When rowPins[1] , rowPins[2] , rowPins[3] are written into high level, colPins[0] ~ colPins[4] get low level."
msgstr ""

#: ../2.1.5_keypad.rst:512
msgid "The loop stopped, there returns pressed_keys = ‘3’."
msgstr ""

#: ../2.1.5_keypad.rst:514
msgid "If you press the buttons ‘1’ and ‘3’, there will return pressed_keys = [‘1’,’3’]."
msgstr ""

#: ../2.1.5_keypad.rst:518
msgid "Phenomenon Picture"
msgstr ""
