# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, sunfounder
# This file is distributed under the same license as the SunFounder Da Vinci Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Da Vinci Kit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-07 09:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../1.1.4_7-segment_display.rst:2
msgid "1.1.4 7-segment Display"
msgstr ""

#: ../1.1.4_7-segment_display.rst:5
msgid "Introduction"
msgstr ""

#: ../1.1.4_7-segment_display.rst:7
msgid "Let's try to drive a 7-segment display to show a figure from 0 to 9 and A to F."
msgstr ""

#: ../1.1.4_7-segment_display.rst:11
msgid "Components"
msgstr ""

#: ../1.1.4_7-segment_display.rst:16
msgid "Principle"
msgstr ""

#: ../1.1.4_7-segment_display.rst:18
msgid "**7-Segment Display**"
msgstr ""

#: ../1.1.4_7-segment_display.rst:20
msgid "A 7-segment display is an 8-shaped component which packages 7 LEDs. Each LED is called a segment - when energized, one segment forms part of a numeral to be displayed."
msgstr ""

#: ../1.1.4_7-segment_display.rst:24
msgid "There are two types of pin connection: Common Cathode (CC) and Common Anode (CA). As the name suggests, a CC display has all the cathodes of the 7 LEDs connected when a CA display has all the anodes of the 7 segments connected. In this kit, we use the former."
msgstr ""

#: ../1.1.4_7-segment_display.rst:33
msgid "Each of the LEDs in the display is given a positional segment with one of its connection pins led out from the rectangular plastic package. These LED pins are labeled from \"a\" through to \"g\" representing each individual LED. The other LED pins are connected together forming a common pin. So by forward biasing the appropriate pins of the LED segments in a particular order, some segments will brighten and others stay dim, thus showing the corresponding character on the display."
msgstr ""

#: ../1.1.4_7-segment_display.rst:41
msgid "**Display Codes**"
msgstr ""

#: ../1.1.4_7-segment_display.rst:43
msgid "To help you get to know how 7-segment displays(Common Cathode) display Numbers, we have drawn the following table. Numbers are the number 0-F displayed on the 7-segment display; (DP) GFEDCBA refers to the corresponding LED set to 0 or 1, For example, 00111111 means that DP and G are set to 0, while others are set to 1. Therefore, the number 0 is displayed on the 7-segment display, while HEX Code corresponds to hexadecimal number."
msgstr ""

#: ../1.1.4_7-segment_display.rst:54
msgid "**74HC595**"
msgstr ""

#: ../1.1.4_7-segment_display.rst:56
msgid "The 74HC595 consists of an 8−bit shift register and a storage register with three−state parallel outputs. It converts serial input into parallel output so you can save IO ports of an MCU."
msgstr ""

#: ../1.1.4_7-segment_display.rst:60
msgid "When MR (pin10) is high level and OE (pin13) is low level, data is input in the rising edge of SHcp and goes to the memory register through the rising edge of SHcp. If the two clocks are connected together, the shift register is always one pulse earlier than the memory register. There is a serial shift input pin (Ds), a serial output pin (Q) and an asynchronous reset button (low level) in the memory register. The memory register outputs a Bus with a parallel 8-bit and in three states. When OE is enabled (low level), the data in memory register is output to the bus."
msgstr ""

#: ../1.1.4_7-segment_display.rst:74
msgid "**Pins of 74HC595 and their functions**:"
msgstr ""

#: ../1.1.4_7-segment_display.rst:76
msgid "**Q0-Q7**: 8-bit parallel data output pins, able to control 8 LEDs or 8 pins of 7-segment display directly."
msgstr ""

#: ../1.1.4_7-segment_display.rst:78
msgid "**Q7’**: Series output pin, connected to DS of another 74HC595 to connect multiple 74HC595s in series."
msgstr ""

#: ../1.1.4_7-segment_display.rst:80
msgid "**MR**: Reset pin, active at low level;"
msgstr ""

#: ../1.1.4_7-segment_display.rst:82
msgid "**SHcp**: Time sequence input of shift register. On the rising edge, the data in shift register moves successively one bit, i.e. data in Q1 moves to Q2, and so forth. While on the falling edge, the data in shift register remain unchanged."
msgstr ""

#: ../1.1.4_7-segment_display.rst:84
msgid "**STcp**: Time sequence input of storage register. On the rising edge, data in the shift register moves into memory register."
msgstr ""

#: ../1.1.4_7-segment_display.rst:86
msgid "**CE**: Output enable pin, active at low level."
msgstr ""

#: ../1.1.4_7-segment_display.rst:88
msgid "**DS**: Serial data input pin"
msgstr ""

#: ../1.1.4_7-segment_display.rst:90
msgid "**VCC**: Positive supply voltage"
msgstr ""

#: ../1.1.4_7-segment_display.rst:92
msgid "**GND**: Ground"
msgstr ""

#: ../1.1.4_7-segment_display.rst:95
msgid "Schematic Diagram"
msgstr ""

#: ../1.1.4_7-segment_display.rst:97
msgid "Connect pin ST_CP of 74HC595 to Raspberry Pi GPIO18, SH_CP to GPIO27, DS to GPIO17, parallel output ports to 8 segments of the LED segment display. Input data in DS pin to shift register when SH_CP (the clock input of the shift register) is at the rising edge, and to the memory register when ST_CP (the clock input of the memory) is at the rising edge. Then you can control the states of SH_CP and ST_CP via the Raspberry Pi GPIOs to transform serial data input into parallel data output so as to save Raspberry Pi GPIOs and drive the display."
msgstr ""

#: ../1.1.4_7-segment_display.rst:107
msgid "T-Board Name"
msgstr ""

#: ../1.1.4_7-segment_display.rst:107
msgid "physical"
msgstr ""

#: ../1.1.4_7-segment_display.rst:107
msgid "wiringPi"
msgstr ""

#: ../1.1.4_7-segment_display.rst:107
msgid "BCM"
msgstr ""

#: ../1.1.4_7-segment_display.rst:108
msgid "GPIO17"
msgstr ""

#: ../1.1.4_7-segment_display.rst:108
msgid "Pin 11"
msgstr ""

#: ../1.1.4_7-segment_display.rst:108
msgid "0"
msgstr ""

#: ../1.1.4_7-segment_display.rst:108
msgid "17"
msgstr ""

#: ../1.1.4_7-segment_display.rst:109
msgid "GPIO18"
msgstr ""

#: ../1.1.4_7-segment_display.rst:109
msgid "Pin 12"
msgstr ""

#: ../1.1.4_7-segment_display.rst:109
msgid "1"
msgstr ""

#: ../1.1.4_7-segment_display.rst:109
msgid "18"
msgstr ""

#: ../1.1.4_7-segment_display.rst:110
msgid "GPIO27"
msgstr ""

#: ../1.1.4_7-segment_display.rst:110
msgid "Pin 13"
msgstr ""

#: ../1.1.4_7-segment_display.rst:110
msgid "2"
msgstr ""

#: ../1.1.4_7-segment_display.rst:110
msgid "27"
msgstr ""

#: ../1.1.4_7-segment_display.rst:117
msgid "Experimental Procedures"
msgstr ""

#: ../1.1.4_7-segment_display.rst:119
msgid "**Step 1:** Build the circuit."
msgstr ""

#: ../1.1.4_7-segment_display.rst:124
msgid "For C Language Users"
msgstr ""

#: ../1.1.4_7-segment_display.rst:126
#: ../1.1.4_7-segment_display.rst:261
msgid "Step 2: Get into the folder of the code."
msgstr ""

#: ../1.1.4_7-segment_display.rst:136
msgid "Step 3: Compile."
msgstr ""

#: ../1.1.4_7-segment_display.rst:146
msgid "Step 4: Run the executable file above."
msgstr ""

#: ../1.1.4_7-segment_display.rst:156
#: ../1.1.4_7-segment_display.rst:281
msgid "After the code runs, you'll see the 7-segment display display 0-9, A-F."
msgstr ""

#: ../1.1.4_7-segment_display.rst:158
#: ../1.1.4_7-segment_display.rst:283
msgid "**Code**"
msgstr ""

#: ../1.1.4_7-segment_display.rst:208
#: ../1.1.4_7-segment_display.rst:343
msgid "**Code Explanation**"
msgstr ""

#: ../1.1.4_7-segment_display.rst:210
msgid "unsigned char SegCode[16] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71}; A segment code array from 0 to F in Hexadecimal (Common cathode)."
msgstr ""

#: ../1.1.4_7-segment_display.rst:224
msgid "Set ds, st_cp, sh_cp three pins to OUTPUT, and the initial state as 0. void hc595_shift(unsigned char dat){} To assign 8 bit value to 74HC595’s shift register."
msgstr ""

#: ../1.1.4_7-segment_display.rst:232
msgid "Assign the dat data to SDI(DS) by bits. Here we assume dat=0x3f(0011 1111, when i=2, 0x3f will shift left(<<) 2 bits. 1111 1100 (0x3f << 2) & 1000 0000 (0x80) = 1000 0000, is true."
msgstr ""

#: ../1.1.4_7-segment_display.rst:238
msgid "SRCLK's initial value was set to 0, and here it's set to 1, which is to generate a rising edge pulse, then shift the DS date to shift register."
msgstr ""

#: ../1.1.4_7-segment_display.rst:244
msgid "RCLK's initial value was set to 0, and here it's set to 1, which is to generate a rising edge, then shift data from shift register to storage register."
msgstr ""

#: ../1.1.4_7-segment_display.rst:256
msgid "In this for loop, we use \"%1X\" to output i as a hexadecimal number. Apply i to find the corresponding segment code in the SegCode[] array, and employ hc595_shift() to pass the SegCode into 74HC595's shift register."
msgstr ""

#: ../1.1.4_7-segment_display.rst:259
msgid "For Python Language Users"
msgstr ""

#: ../1.1.4_7-segment_display.rst:271
msgid "Step 3: Run."
msgstr ""

#: ../1.1.4_7-segment_display.rst:288
msgid "You can **Modify/Reset/Copy/Run/Stop** the code below. But before that, you need to go to  source code path like ``davinci-kit-for-raspberry-pi\\\\python``."
msgstr ""

#: ../1.1.4_7-segment_display.rst:349
msgid "A segment code array from 0 to F in Hexadecimal (Common cathode)."
msgstr ""

#: ../1.1.4_7-segment_display.rst:359
msgid "Set ds, st_cp, sh_cp three pins to output and the initial state as low level."
msgstr ""

#: ../1.1.4_7-segment_display.rst:365
msgid "Assign the dat data to SDI(DS) by bits. Here we assume dat=0x3f(0011 1111, when bit=2, 0x3f will shift right(<<) 2 bits. 1111 1100 (0x3f << 2) & 1000 0000 (0x80) = 1000 0000, is true."
msgstr ""

#: ../1.1.4_7-segment_display.rst:371
msgid "SRCLK's initial value was set to LOW, and here it's set to HIGH, which is to generate a rising edge pulse, then shift the DS date to shift register."
msgstr ""

#: ../1.1.4_7-segment_display.rst:377
msgid "RCLK's initial value was set to LOW, and here it's set to HIGH, which is to generate a rising edge, then shift data from shift register to storage register."
msgstr ""

#: ../1.1.4_7-segment_display.rst:380
msgid "The hexadecimal format of number 0~15 are (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F)"
msgstr ""

#: ../1.1.4_7-segment_display.rst:383
msgid "Phenomenon Picture"
msgstr ""
